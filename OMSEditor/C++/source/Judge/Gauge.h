#pragma once

enum class JUDGE_TYPE;
enum class GAUGE_OPTION;

/********************************************/
//	ゲージの増減を管理するクラス
/********************************************/
class GaugeManager
{
public:
	//===============================================
	//	コンストラクタ・デストラクタ
	//===============================================
	GaugeManager(GAUGE_OPTION eOption, int *ipGauge);
	~GaugeManager(){}


	//===============================================
	//	判定したときに呼び出す
	//===============================================
	void Compute(JUDGE_TYPE eJudge);


	//===============================================
	//	アクセサー
	//===============================================
	void GaugeSet(int iGauge);
	void SetNumNorts(int iNumNorts);
	bool isFailed(){ return (*m_ipGauge == 0); }	// 閉店フラグ
	GAUGE_OPTION GetGaugeOption(){ return m_eOption; }

private:
	//===============================================
	//	メンバ変数
	//===============================================
	float m_fGauge;			// 内部的に計算するゲージ変数(小数点込)
	int *m_ipGauge;			// 外部として表示する用の変数へのポインタ 偶数切り捨てとしてゲームに表示するint型へのアドレス(参照で書き換えていく)
	GAUGE_OPTION m_eOption;	// ゲージオプション
	float m_fNormalAdd;		// ノマゲのときのゲージ増加数(総ノーツ数で計算)


	//===============================================
	//	デフォルトコンストラクタ封印
	//===============================================
	GaugeManager();
};