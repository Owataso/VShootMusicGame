#pragma once

#include "TDNLIB.h"

//===============================================
//	アルファベットテーブル
//===============================================
static const char EP_AlphabetTable[]
{
	'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
	'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '-', '*', '/', '!', '?', '#', '$', ' ',
	'\0'	// 終端コード(名前入力の際はこれを「名前入力終了」とする)
};


/********************************************/
//	名前アルファベット描画用(主にプレイヤーの名前)
/********************************************/
class AlphabetRenderer
{
public:
	//===============================================
	//	コンストラクタ
	//===============================================
	AlphabetRenderer() :m_pAlphabet(new tdn2DObj("DATA/UI/Other/alphabet.png"))
	{
		// マップコンテナ初期化
		for (int i = 0; i < _countof(EP_AlphabetTable); i++)
		{
			m_id[EP_AlphabetTable[i]] = i;
		}
	}

	//===============================================
	//	描画(引数cのアルファベットを描画)
	//===============================================
	void Render(int x, int y, char c)
	{
		int ID = m_id[c];
		int srcX, srcY;

		// 終了フラグ(END)
		if (c == '\0')
		{
			srcX = 7, srcY = 7;	// 一番右下
		}
		// 空白
		else if (c == ' ')
		{
			srcX = 6, srcY = 7;	// 一番右下の1個左
		}

		// それ以外の普通の文字
		else
		{
			srcX = ID % 8, srcY = ID / 8;
		}

		m_pAlphabet->Render(x, y, 64, 64, srcX * 64, srcY * 64, 64, 64);
	}
	int GetAlphabetID(char c){ return m_id[c]; }

private:
	//===============================================
	//	メンバ変数
	//===============================================
	std::unique_ptr<tdn2DObj> m_pAlphabet;	// アルファベットの画像
	std::map<char, int> m_id;				// 
};